// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: v1/api.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type QueryType int32

const (
	QueryType_ip       QueryType = 0
	QueryType_port     QueryType = 1
	QueryType_mac      QueryType = 2
	QueryType_protocol QueryType = 3
)

// Enum value maps for QueryType.
var (
	QueryType_name = map[int32]string{
		0: "ip",
		1: "port",
		2: "mac",
		3: "protocol",
	}
	QueryType_value = map[string]int32{
		"ip":       0,
		"port":     1,
		"mac":      2,
		"protocol": 3,
	}
)

func (x QueryType) Enum() *QueryType {
	p := new(QueryType)
	*p = x
	return p
}

func (x QueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_api_proto_enumTypes[0].Descriptor()
}

func (QueryType) Type() protoreflect.EnumType {
	return &file_v1_api_proto_enumTypes[0]
}

func (x QueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryType.Descriptor instead.
func (QueryType) EnumDescriptor() ([]byte, []int) {
	return file_v1_api_proto_rawDescGZIP(), []int{0}
}

type QueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	Duration     *durationpb.Duration   `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Label        string                 `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	QueryType    QueryType              `protobuf:"varint,4,opt,name=queryType,proto3,enum=v1.QueryType" json:"queryType,omitempty"`
	Query        string                 `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	BinaryOutput bool                   `protobuf:"varint,6,opt,name=binaryOutput,proto3" json:"binaryOutput,omitempty"` // If true, will send binary; if false, will send QueryResp
	ShowAll      bool                   `protobuf:"varint,7,opt,name=showAll,proto3" json:"showAll,omitempty"`           // If true, will show all of the packet details in Text field
	Encode       bool                   `protobuf:"varint,8,opt,name=encode,proto3" json:"encode,omitempty"`             // If true, will encode response text as Base64
}

func (x *QueryReq) Reset() {
	*x = QueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReq) ProtoMessage() {}

func (x *QueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_v1_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReq.ProtoReflect.Descriptor instead.
func (*QueryReq) Descriptor() ([]byte, []int) {
	return file_v1_api_proto_rawDescGZIP(), []int{0}
}

func (x *QueryReq) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *QueryReq) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *QueryReq) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *QueryReq) GetQueryType() QueryType {
	if x != nil {
		return x.QueryType
	}
	return QueryType_ip
}

func (x *QueryReq) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *QueryReq) GetBinaryOutput() bool {
	if x != nil {
		return x.BinaryOutput
	}
	return false
}

func (x *QueryReq) GetShowAll() bool {
	if x != nil {
		return x.ShowAll
	}
	return false
}

func (x *QueryReq) GetEncode() bool {
	if x != nil {
		return x.Encode
	}
	return false
}

// QueryResp will send either text or binary, depending on the QueryReq.
type QueryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Length     int64                  `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	SrcMAC     string                 `protobuf:"bytes,3,opt,name=srcMAC,proto3" json:"srcMAC,omitempty"`
	DstMAC     string                 `protobuf:"bytes,4,opt,name=dstMAC,proto3" json:"dstMAC,omitempty"`
	SrcIP      string                 `protobuf:"bytes,5,opt,name=srcIP,proto3" json:"srcIP,omitempty"`
	DstIP      string                 `protobuf:"bytes,6,opt,name=dstIP,proto3" json:"dstIP,omitempty"`
	SrcPort    uint32                 `protobuf:"varint,7,opt,name=srcPort,proto3" json:"srcPort,omitempty"`
	SrcPortStr string                 `protobuf:"bytes,8,opt,name=srcPortStr,proto3" json:"srcPortStr,omitempty"`
	DstPort    uint32                 `protobuf:"varint,9,opt,name=dstPort,proto3" json:"dstPort,omitempty"`
	DstPortStr string                 `protobuf:"bytes,10,opt,name=dstPortStr,proto3" json:"dstPortStr,omitempty"`
	Proto      string                 `protobuf:"bytes,11,opt,name=proto,proto3" json:"proto,omitempty"`
	Ipv6       bool                   `protobuf:"varint,12,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	Text       string                 `protobuf:"bytes,14,opt,name=text,proto3" json:"text,omitempty"`
	Data       []byte                 `protobuf:"bytes,15,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryResp) Reset() {
	*x = QueryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResp) ProtoMessage() {}

func (x *QueryResp) ProtoReflect() protoreflect.Message {
	mi := &file_v1_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResp.ProtoReflect.Descriptor instead.
func (*QueryResp) Descriptor() ([]byte, []int) {
	return file_v1_api_proto_rawDescGZIP(), []int{1}
}

func (x *QueryResp) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *QueryResp) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *QueryResp) GetSrcMAC() string {
	if x != nil {
		return x.SrcMAC
	}
	return ""
}

func (x *QueryResp) GetDstMAC() string {
	if x != nil {
		return x.DstMAC
	}
	return ""
}

func (x *QueryResp) GetSrcIP() string {
	if x != nil {
		return x.SrcIP
	}
	return ""
}

func (x *QueryResp) GetDstIP() string {
	if x != nil {
		return x.DstIP
	}
	return ""
}

func (x *QueryResp) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *QueryResp) GetSrcPortStr() string {
	if x != nil {
		return x.SrcPortStr
	}
	return ""
}

func (x *QueryResp) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *QueryResp) GetDstPortStr() string {
	if x != nil {
		return x.DstPortStr
	}
	return ""
}

func (x *QueryResp) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

func (x *QueryResp) GetIpv6() bool {
	if x != nil {
		return x.Ipv6
	}
	return false
}

func (x *QueryResp) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *QueryResp) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// QueryBinaryResp will send a pcap binary stream.
type QueryBinaryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Binary []byte `protobuf:"bytes,2,opt,name=binary,proto3" json:"binary,omitempty"`
}

func (x *QueryBinaryResp) Reset() {
	*x = QueryBinaryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBinaryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBinaryResp) ProtoMessage() {}

func (x *QueryBinaryResp) ProtoReflect() protoreflect.Message {
	mi := &file_v1_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBinaryResp.ProtoReflect.Descriptor instead.
func (*QueryBinaryResp) Descriptor() ([]byte, []int) {
	return file_v1_api_proto_rawDescGZIP(), []int{2}
}

func (x *QueryBinaryResp) GetBinary() []byte {
	if x != nil {
		return x.Binary
	}
	return nil
}

var File_v1_api_proto protoreflect.FileDescriptor

var file_v1_api_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xaa, 0x02, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x38,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x68, 0x6f, 0x77, 0x41, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x68, 0x6f, 0x77, 0x41, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xff,
	0x02, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x72, 0x63, 0x4d, 0x41, 0x43, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x72, 0x63, 0x4d, 0x41, 0x43, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x4d, 0x41, 0x43,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x73, 0x74, 0x4d, 0x41, 0x43, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x72, 0x63, 0x49, 0x50, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x72, 0x63, 0x49, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x73, 0x74, 0x49, 0x50, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x72,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x72, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x29, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2a, 0x34, 0x0a, 0x09, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x69, 0x70, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x6d, 0x61,
	0x63, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x10,
	0x03, 0x32, 0x88, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x1a, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x0d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x07, 0x12, 0x05, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x30, 0x01,
	0x12, 0x3a, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x30, 0x01, 0x42, 0x23, 0x5a, 0x21,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6f, 0x72, 0x6e, 0x6c, 0x2e, 0x67, 0x6f, 0x76, 0x2f, 0x73, 0x69,
	0x74, 0x75, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x75, 0x72, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_api_proto_rawDescOnce sync.Once
	file_v1_api_proto_rawDescData = file_v1_api_proto_rawDesc
)

func file_v1_api_proto_rawDescGZIP() []byte {
	file_v1_api_proto_rawDescOnce.Do(func() {
		file_v1_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_api_proto_rawDescData)
	})
	return file_v1_api_proto_rawDescData
}

var file_v1_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1_api_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_v1_api_proto_goTypes = []interface{}{
	(QueryType)(0),                // 0: v1.QueryType
	(*QueryReq)(nil),              // 1: v1.QueryReq
	(*QueryResp)(nil),             // 2: v1.QueryResp
	(*QueryBinaryResp)(nil),       // 3: v1.QueryBinaryResp
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 5: google.protobuf.Duration
}
var file_v1_api_proto_depIdxs = []int32{
	4, // 0: v1.QueryReq.startTime:type_name -> google.protobuf.Timestamp
	5, // 1: v1.QueryReq.duration:type_name -> google.protobuf.Duration
	0, // 2: v1.QueryReq.queryType:type_name -> v1.QueryType
	4, // 3: v1.QueryResp.timestamp:type_name -> google.protobuf.Timestamp
	1, // 4: v1.PacketService.QueryStream:input_type -> v1.QueryReq
	1, // 5: v1.PacketService.QueryBinaryStream:input_type -> v1.QueryReq
	2, // 6: v1.PacketService.QueryStream:output_type -> v1.QueryResp
	3, // 7: v1.PacketService.QueryBinaryStream:output_type -> v1.QueryBinaryResp
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_v1_api_proto_init() }
func file_v1_api_proto_init() {
	if File_v1_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBinaryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_api_proto_goTypes,
		DependencyIndexes: file_v1_api_proto_depIdxs,
		EnumInfos:         file_v1_api_proto_enumTypes,
		MessageInfos:      file_v1_api_proto_msgTypes,
	}.Build()
	File_v1_api_proto = out.File
	file_v1_api_proto_rawDesc = nil
	file_v1_api_proto_goTypes = nil
	file_v1_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PacketServiceClient is the client API for PacketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PacketServiceClient interface {
	QueryStream(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (PacketService_QueryStreamClient, error)
	QueryBinaryStream(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (PacketService_QueryBinaryStreamClient, error)
}

type packetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPacketServiceClient(cc grpc.ClientConnInterface) PacketServiceClient {
	return &packetServiceClient{cc}
}

func (c *packetServiceClient) QueryStream(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (PacketService_QueryStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PacketService_serviceDesc.Streams[0], "/v1.PacketService/QueryStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &packetServiceQueryStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PacketService_QueryStreamClient interface {
	Recv() (*QueryResp, error)
	grpc.ClientStream
}

type packetServiceQueryStreamClient struct {
	grpc.ClientStream
}

func (x *packetServiceQueryStreamClient) Recv() (*QueryResp, error) {
	m := new(QueryResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *packetServiceClient) QueryBinaryStream(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (PacketService_QueryBinaryStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PacketService_serviceDesc.Streams[1], "/v1.PacketService/QueryBinaryStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &packetServiceQueryBinaryStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PacketService_QueryBinaryStreamClient interface {
	Recv() (*QueryBinaryResp, error)
	grpc.ClientStream
}

type packetServiceQueryBinaryStreamClient struct {
	grpc.ClientStream
}

func (x *packetServiceQueryBinaryStreamClient) Recv() (*QueryBinaryResp, error) {
	m := new(QueryBinaryResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PacketServiceServer is the server API for PacketService service.
type PacketServiceServer interface {
	QueryStream(*QueryReq, PacketService_QueryStreamServer) error
	QueryBinaryStream(*QueryReq, PacketService_QueryBinaryStreamServer) error
}

// UnimplementedPacketServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPacketServiceServer struct {
}

func (*UnimplementedPacketServiceServer) QueryStream(*QueryReq, PacketService_QueryStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryStream not implemented")
}
func (*UnimplementedPacketServiceServer) QueryBinaryStream(*QueryReq, PacketService_QueryBinaryStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryBinaryStream not implemented")
}

func RegisterPacketServiceServer(s *grpc.Server, srv PacketServiceServer) {
	s.RegisterService(&_PacketService_serviceDesc, srv)
}

func _PacketService_QueryStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PacketServiceServer).QueryStream(m, &packetServiceQueryStreamServer{stream})
}

type PacketService_QueryStreamServer interface {
	Send(*QueryResp) error
	grpc.ServerStream
}

type packetServiceQueryStreamServer struct {
	grpc.ServerStream
}

func (x *packetServiceQueryStreamServer) Send(m *QueryResp) error {
	return x.ServerStream.SendMsg(m)
}

func _PacketService_QueryBinaryStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PacketServiceServer).QueryBinaryStream(m, &packetServiceQueryBinaryStreamServer{stream})
}

type PacketService_QueryBinaryStreamServer interface {
	Send(*QueryBinaryResp) error
	grpc.ServerStream
}

type packetServiceQueryBinaryStreamServer struct {
	grpc.ServerStream
}

func (x *packetServiceQueryBinaryStreamServer) Send(m *QueryBinaryResp) error {
	return x.ServerStream.SendMsg(m)
}

var _PacketService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.PacketService",
	HandlerType: (*PacketServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryStream",
			Handler:       _PacketService_QueryStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryBinaryStream",
			Handler:       _PacketService_QueryBinaryStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/api.proto",
}
